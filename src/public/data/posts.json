[
	{
		"author": {
			"name": "Adipony",
			"href": "https://github.com/Adipony"
		},
		"timeCreated": 1723237735560,
		"title": "Hello!!",
		"tags": ["Tech", "Rant"],
		"body": "<p>Hi, welcome to my first blog post. <br><br>Today I just wanted to talk about <abbr>HTML5</abbr> (HyperText Markup Language 5) itself and how cool it is. </p><p>I've been a web developer for around 3 years now, and I always questioned why we needed so many technologies such as React, NextJS, webpack and so on just to get a website up and running.<br><br> I made this website to break free from all of the mess the web dev community dug itself into, and go back to a simpler, older design.<br> I guess, in a way, i'll be going over the entire journey that the web has gone through, trying to understand why certain technologies were adopted or abandoned, and making my own decisions throughout. </p><p>This journey came about from two events i've gone through lately. <br><br> The first is an evening I took to read up the <a href=\"https://developer.mozilla.org/en-US\">MDN Web Docs</a>.<br> I was amazed by the amount of work done on HTML5 ever since I used it way back in 2012.</p><aside style=\"padding: 30px;\"><details><summary>Check this out</summary>Fully working pop-up behavior! all working with HTML and absolutely <em>ZERO</em> JavaScript! <br>  read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\">The &lt;details&gt; element</a></details> </aside><p>Up until now in my web dev journey, I never cared much for semantic HTML, opting instead to just use &lt;div&gt; elements for everything. <br>Now I realize how inaccessible I was making my websites without using &lt;aside&gt;s, &lt;nav&gt;s, or &lt;article&gt;s. <br><br>This made me delve deeper into accessibility and try my best to make any of my future websites more accessible by utilizing semantic elements.</p><p>Asides from accessibility, I also found some really useful ones, like &lt;datalist&gt;, which essentially allows you to create an autocomplete component without needing Material-UI and a bunch of convoluted state logic.</p><br><br><p>The other event was setting up <del>NextAuth</del> <ins><a href=\"https://authjs.dev/\">Auth.js</a></ins> in my current company. <br/>First of all, A huge thanks to the people working on Auth.js, I genuinely think this package has done wonders in alleviating the headache of managing sessions, authentication, authorization, and everything in between. <br><br> I was actually set-up auth on my personal project using this package in less than a day, which is pretty cool.</p><p>That being said, I had to stop and think, how the hell did we get here? <br><br>One of my main gripes was with how the package won't handle all kinds of annoying but common edge-cases, requiring me to code in some logic myself.<br><br>Maybe i'm just bad at coding, or maybe authentication really is as complicated as people say it is, but It was definitely a headache.</p> <p>That experience made me yearn back for the days where a simple name and a password was all we needed for authentication - before JWTs, RBAC, session tokens and token rotation.<br><br>I obviously understand why we moved on from simple credentials, I understand how unsafe it can be nowadays, I don't doubt the methods we have in place now. <br><br>I guess i'm just sad that everything feels so complicated nowadays. </p><p>You can't work on authentication without some library. <br><br>You can't make a website without some <a href=\"https://react.dev/?uwu=true\">framework</a> that goes on to dominate the market, and letting a <a href=\"https://vercel.lol/\">certain company</a> dominate THAT framework, and sell you <a href=\"https://nextjs.org/?uwu=true\">a meta framework</a> on top of it, with the promises of performance and stability.<br><br> You will watch slowly as your web \"application\" amasses dependencies as you take on more and more tasks which should be simple, but for some reason require tinkering with a ton of config files and whatnot.<br><br>I sound insane when I describe the types of errors I encounter in my job to my back-end friends. \"What do you mean \"i don't have a debugger\"? how do you debug your code?\", \"what the hell is an effect?\", etc, etc.</p> <p>Yeah, that's about it, cya whenever I find more stuff to write about.</p>"
	},
	{
		"author": { "name": "Adipony", "href": "https://github.com/Adipony" },
		"timeCreated": 1723293194874,
		"title": "File based routing?? WITHOUT NEXT.JS?!?!?!",
		"tags": ["Tech"],
		"body": "<p>Here's a neat little trick I found, you can achieve file based routing without using next.js!<p>\n<p>Let's start with an example of a basic HTML website's folder structure:</p>\n\n<samp>\n        <pre><code>\nmy-website/\n├── index.html\n├── styles.css\n├── script.js\n        </code></pre>\n</samp>\n\n<p>By default, browsers look for a file called \"index.html\" file, which they will then display as the default page of the website, without adding the \"index.html\" suffix to the URL. </p>\n\n<p>think about it this way: <br>\nwhen you visit a website, it's almost like opening a folder in your computer, and opening the file containing the HTML of your website. <br>\nIn fact, that's pretty much how websites would work back in the day (and still do to this day! albeit with more security to keep sensitive data out of prying eyes), you can \"ask\" the server for any file, provided that it exists in the folder that the server is serving, and that you have permission to see that file. </p>\n\n<aside><details><summary>Wanna try something neat?</summary>Go to this website's URL, and change the end of it from \"/\" to \"/index.js\". <br> Tada! you just peeked into my main javascript file! I use it to run all sorts of logic on my website to make sure it runs smoothly.</aside>\n\n<p>Hmmm... so if you can access files on a servers using the URL, and the browser omits files named \"index.html\" from the url.... <br> what if i just create an index.html file inside of a folder?\n<em>The result is file-based routing!</em> <br>\n<img src=\"https://media.tenor.com/w-PCA2wkMQEAAAAM/mind-blown-shocked.gif\" alt=\"Animated GIF of a man having his mind blown by this newfound concept\" />\n</p>\n\n\n<p>Let's refer back to our HTML project, and revise it a little</p>\n<samp>\n        <pre><code>\nmy-website/\n├── index.html\n├── styles.css\n├── script.js\n├── dogs/\n│   └── index.html\n        </code></pre>\n</samp>\n\n<p>We added a new folder, named \"dogs\", and inside of it we added another HTML file, which is also named \"index.html\". <br>\nFor the sake of the example, let's say I hosted this website on the URL \"https://i-love-dogs.com/\". <br> \nNow, if we were to visit my website, navigating to \"https://i-love-dogs.com/\" would show us the main page, as in, the \"index.html\" file found at the root of my project folder. <br>\nHowever, if we simply added \"/dogs\" to the url, like so: \"https://i-love-dogs.com/dogs\", we would instead see the other \"index.html file we created!\n</p>\n\n<h2>Why am I telling you all of this?</h2>\n<p>This may seem obvious or mundane to some of you, but as someone who's been a React developer, rather than a Front-end developer, I felt ashamed not knowing this concept after 3 years of working in the field. <br>\nWhen i first worked on this framework-less blog, I ran into the common need of having to split my website into multiple pages. <br>\nsounds simple enough, right? after all, if developers back in the 90s could figure it out without any framework, so could i!</p>\n\n<p>I hopped on Google, and typed \"HTML multiple pages\", but little did I know what a rabbit hole I was getting myself into... <br>\nFirst issue: All of the results suggested using <a href=\"https://reactrouter.com/en/main\">React Router</a>! <br>\nThis went against the entire point of my project, I'm not going to switch to React just to have support for multiple pages! <br>\nSo my search continued.\n </p>\n<p>I saw that people were talked a lot about web servers, and this made sense to me at first. <br>\n\"Ah! so you need to use a backend and handle the routes yourself\" I thought naively. <br>\nAfter a few hours of hammering away at a go web server I built, I just felt kind of, bad about it. \n\n<p>I mean, sure, the server was working and serving me different html files depending on my URL, but it felt like I was messing more with Go rather than HTML. <br>\nI was also using live-server to run my server up locally, and with today's technology, there's no shortage of services that host all your files and handle the routing themselves. <br>\nI had enough, i scrapped the entire thing and started over, and that's when it hit me. <br>\n\"If i was a web developer way back when, surely I had a better way of handling multiple pages in my website. It can't possible be this complicated!\". <br>\n\"Whatever\", I thought. \"I'll just create this new HTML file, here in my project, and eventually i'll figure out how to link it back to my main page.\" <br>\n\"Hmm... how do you open local HTML files again? ah, I think I can just open the file with my browser\". I Opened the file and glanced at the URL section. <br>\n\"file://C:/Users/Adipony/Documents/my-website/editor.html\" <br> </p>\n<p>\n\n\"Wait\", I paused, \"The local file path is just a url in my filesystem pointing to that file... isn't that also how a web server serves a file?\" <br>\nI quickly returned to my website, the local url reading \"localhost:5500/\". i changed the ending to \"/editor.html\" and....<br>\nit actually worked.\n</p>\n\n<p>No Next.js, No React, Not even implementing custom web server to handle the request (i literally had the live-server extension specifically for this purpose). All I needed was to change my way of thinking.  <br> Thank you for reading so far, I really appreciate it! <3</p>"
	}
]